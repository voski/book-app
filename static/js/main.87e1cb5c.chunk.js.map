{"version":3,"sources":["components/SearchForm.js","components/Hideable.js","components/ListItem.js","components/BookList.js","api/GoogleBooks.js","components/BookSearcher.js","serviceWorker.js","index.js","components/App.js"],"names":["SearchForm","_ref","onChange","placeholder","query","buttonAction","onSubmit","react_default","a","createElement","type","value","Hideable","_ref$show","show","children","react","ListItem","_ref$volumeInfo","volumeInfo","title","subtitle","authors","imageLinks","publishedDate","publisher","infoLink","completeTitle","concat","authorNames","join","img","thumbnail","className","href","target","rel","src","alt","BookList","_ref$books","books","bookItems","map","item","components_ListItem","key","id","etag","maxResults","_ref$startIndex","startIndex","params","fetch","then","resp","ok","json","Error","BookSearcher","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","itemsPerPage","showError","showMore","handleSearchClick","bind","assertThisInitialized","handleShowMore","handleSearchChange","event","preventDefault","setState","searchInitial","_this2","fetchFromGoogle","prevState","newBooks","items","slice","length","catch","error","_this3","newState","console","log","queryBooksApi","components_SearchForm","components_BookList","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_BookSearcher","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87e1cb5c.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction SearchForm({ onChange, placeholder, query, buttonAction, onSubmit }) {\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        type=\"text\"\n        placeholder={placeholder}\n        onChange={onChange}\n        value={query}\n      />\n      <input type=\"submit\" value={buttonAction} />\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React, { Fragment } from \"react\";\n\n// This is a component that allows you to hide/show it's children.\n// when `show` is truthy this render it's children\nexport default ({ show = false, children }) =>\n  show && <Fragment>{children}</Fragment>;\n","import React from \"react\";\n\n/* component for each individual book result */\nfunction ListItem({ volumeInfo = {} }) {\n  const {\n    title,\n    subtitle,\n    authors,\n    imageLinks,\n    publishedDate,\n    publisher,\n    infoLink\n  } = volumeInfo;\n  const completeTitle = subtitle ? `${title}: ${subtitle}` : title;\n  const authorNames = (authors || [\"unknown\"]).join(\", \");\n  const img =\n    (imageLinks && imageLinks.thumbnail) ||\n    \"https://books.google.com/googlebooks/images/no_cover_thumb.gif\";\n\n  return (\n    <div className=\"book-item\">\n      <h3>{completeTitle}</h3>\n      <section className=\"book-info\">\n        <a href={infoLink} target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src={img} alt=\"book cover\" />\n        </a>\n\n        <section className=\"book-info-details\">\n          <p>{authorNames}</p>\n          <p>\n            {publisher} - {publishedDate}\n          </p>\n        </section>\n      </section>\n    </div>\n  );\n}\n\nexport default ListItem;\n","import React, { Fragment } from \"react\";\nimport ListItem from \"./ListItem\";\n\n/* component for the list of books */\nfunction BookList({ books = [] }) {\n  // sometimes API returns same item.id with a different etag\n  // combine both so react will stay happy and not complain about duplicate keys\n  const bookItems = books.map(item => (\n    <ListItem volumeInfo={item.volumeInfo} key={item.id + item.etag} />\n  ));\n\n  return <Fragment>{bookItems}</Fragment>;\n}\n\nexport default BookList;\n","const API = \"https://www.googleapis.com/books/v1/volumes\";\n\nconst query = ({ maxResults, startIndex = 0, query }) => {\n  const params = `?q=${query}&maxResults=${maxResults}&startIndex=${startIndex}`;\n  const url = API + params;\n\n  return fetch(url).then(resp => {\n      if (resp.ok) {\n          return resp.json();\n      }\n\n      // maybe make this a specific kind of error?\n      throw new Error(\"Error searching for books\");\n  });\n};\n\nexport default query;","import React, { Component, Fragment } from \"react\";\nimport SearchForm from \"./SearchForm\";\nimport Hideable from \"./Hideable\";\nimport BookList from \"./BookList\";\nimport queryBooksApi from \"../api/GoogleBooks\";\n\n//main component arranges child components and holds state\nclass BookSearcher extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      query: \"\",\n      itemsPerPage: 10,\n      books: [],\n      showError: false,\n      showMore: false\n    };\n\n    this.handleSearchClick = this.handleSearchClick.bind(this);\n    this.handleShowMore = this.handleShowMore.bind(this);\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n  }\n\n  // handles changes to input field\n  handleSearchChange(event) {\n    event.preventDefault();\n    this.setState({ query: event.target.value });\n  }\n\n  // click handler for search button\n  // clears out existing results and performs search\n  handleSearchClick(event) {\n    event.preventDefault();\n    this.setState({ books: [], showMore: false }, this.searchInitial);\n  }\n\n  // click handler for the more button\n  // appends existing results with new ones\n  handleShowMore(event) {\n    event.preventDefault();\n    this.fetchFromGoogle()\n      .then(json =>\n        this.setState((prevState, props) => {\n          const newBooks = json.items.slice(0, prevState.itemsPerPage);\n          return {\n            books: prevState.books.concat(newBooks),\n            showMore: json.items.length > prevState.itemsPerPage,\n            showError: false\n          };\n        })\n      )\n      .catch(error => this.setState({ showError: true }));\n  }\n\n  // performs search against google when we are not using \"show more\"\n  // replaces existing results w/ new ones\n  searchInitial() {\n    this.fetchFromGoogle()\n      .then(json =>\n        this.setState((prevState, props) => {\n          const newBooks = json.items.slice(0, prevState.itemsPerPage);\n          const newState = {\n            books: newBooks,\n            showError: false,\n            showMore: json.items.length > prevState.itemsPerPage\n          };\n          console.log(newState);\n          return newState;\n        })\n      )\n      .catch(error => this.setState({ books: [], showError: true }));\n  }\n\n  // performs get request from google api and formats response\n  // will throw error in case of failure while requesting data\n  fetchFromGoogle() {\n    // get one extra so we know if we need to paginate\n    const maxResults = this.state.itemsPerPage + 1;\n\n    // indexes start at 0\n    // If we have 10 books so far the last books index will be 9.\n    // So we can always just make the start index the # of books so far\n    const startIndex = this.state.books.length;\n    const query = this.state.query;\n    return queryBooksApi({ query, maxResults, startIndex });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <header>\n          <h1>Search For Books</h1>\n          <SearchForm\n            buttonAction=\"search\"\n            placeholder=\"Title, ISBN, Author, ...\"\n            onChange={this.handleSearchChange}\n            query={this.state.query}\n            onSubmit={this.handleSearchClick}\n          />\n        </header>\n\n        <main>\n          <Hideable show={this.state.showError} />\n          <BookList books={this.state.books} />\n        </main>\n\n        <footer>\n          {this.state.showMore && (\n            <button onClick={this.handleShowMore}>Show More</button>\n          )}\n        </footer>\n      </Fragment>\n    );\n  }\n}\n\nexport default BookSearcher;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport BookSearcher from \"./BookSearcher\";\n\nexport default () => <BookSearcher />;\n"],"sourceRoot":""}